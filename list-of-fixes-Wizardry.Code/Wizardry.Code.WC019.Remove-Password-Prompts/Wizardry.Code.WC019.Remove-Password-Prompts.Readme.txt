Wizardry Proving Grounds v3.0 - Pascal Code Changes
===================================================

The baseline is the re-engineered Pascal source code (and assembler code) from the Wizardry_I program by Thomas William Ewers. This project would not exist without it.


Enhancement #:	WC019 - Remove Password Prompts
===============================================

Status:		Fixed. Recompiled. Verified.

Date of change:	29-Jan-2023.

Contributor:	E. Labelle.

The Issue:	Cannot add any more code since the floppy disk is full.

The fix:	Removed all the code pertaining to passwords.

Why this fix:	To make a good chunck of disk space availble for code. Passwords for characters are not necessary.

Source Disk:	Wiz1C.dsk

File:		CASTLE.TEXT
		ROLLER.TEXT

Segments:	PROCEDURE GETPASS( VAR PASSWORD: STRING);  (* P010A02 *) - This segment appears twice
		PROCEDURE ADDPARTY;  (* P010A09 *)
		PROCEDURE CHGPASS;  (* P010B1C *)
		PROCEDURE TRAINING;  (* P010B16 *)
		PROCEDURE MAKEMENU;  (* P010B0D *)

Removed code from:	CASTLE.TEXT

  6536  16    2:D     1     PROCEDURE GETPASS( VAR PASSWORD: STRING);  (* P010A02 *)
  6537  16    2:D     2                         
  6538  16    2:D     2       VAR
  6539  16    2:D     2            UNUSEDXX : INTEGER;
  6540  16    2:D     3            RANDX    : INTEGER;
  6541  16    2:D     4            CHRCNT   : INTEGER;
  6542  16    2:D     5                         
  6543  16    2:0     0       BEGIN
  6544  16    2:1     0         CHRCNT := 0;
  6545  16    2:1     3         REPEAT
  6546  16    2:2     3           GETKEY;
  6547  16    2:2     6           IF INCHAR <> CHR( CRETURN) THEN
  6548  16    2:3    11             IF CHRCNT < 15 THEN
  6549  16    2:4    16               BEGIN
  6550  16    2:5    16                 FOR RANDX := 0 TO (RANDOM MOD 2) DO
  6551  16    2:6    33                   WRITE( CHR( 88));
  6552  16    2:5    48                 CHRCNT := CHRCNT + 1;
  6553  16    2:5    53                 PASSWORD[ CHRCNT] := INCHAR
  6554  16    2:4    55               END
  6555  16    2:3    57             ELSE
  6556  16    2:4    59               WRITE( CHR(7))
  6557  16    2:1    67         UNTIL INCHAR = CHR( CRETURN);
  6558  16    2:1    72         WRITELN;
  6559  16    2:1    78         PASSWORD[ 0] := CHR( CHRCNT)
  6560  16    2:0    81       END;  (* GETPASS *)


PROCEDURE ADDPARTY;  (* P010A09 *)
  6725  16    9:1   270           GOTOXY( 0, 20);
  6726  16    9:1   275           WRITE( 'ENTER PASSWORD  >');
  6727  16    9:1   302           GETPASS(  CHARNAME);
  6728  16    9:1   306           GOTOXY( 0, 21);
  6729  16    9:1   311           IF CHARNAME <> CHARACTR[ PARTYCNT].PASSWORD THEN
  6730  16    9:2   324             EXITADDP( '** THATS NOT IT **');


Removed code from:	ROLLER.TEXT

  7412  17    2:D     1     PROCEDURE GETPASS( VAR PASSWORD: STRING);  (* P010B02 *)
  7413  17    2:D     2     
  7414  17    2:D     2       VAR
  7415  17    2:D     2            UNUSEDXX : INTEGER;
  7416  17    2:D     3            RANDX    : INTEGER;
  7417  17    2:D     4            CHRCNT   : INTEGER;
  7418  17    2:D     5       
  7419  17    2:0     0       BEGIN
  7420  17    2:1     0         CHRCNT := 0;
  7421  17    2:1     3         REPEAT
  7422  17    2:2     3           GETKEY;
  7423  17    2:2     6           IF INCHAR <> CHR( CRETURN) THEN
  7424  17    2:3    11             IF CHRCNT < 15 THEN
  7425  17    2:4    16               BEGIN
  7426  17    2:5    16                 FOR RANDX := 0 TO (RANDOM MOD 2) DO
  7427  17    2:6    33                   WRITE( CHR( 88));
  7428  17    2:5    48                 CHRCNT := CHRCNT + 1;
  7429  17    2:5    53                 PASSWORD[ CHRCNT] := INCHAR
  7430  17    2:4    55               END
  7431  17    2:3    57             ELSE
  7432  17    2:4    59               WRITE( CHR( 7));
  7433  17    2:1    67         UNTIL INCHAR = CHR( CRETURN);
  7434  17    2:1    72         WRITELN;
  7435  17    2:1    78         PASSWORD[ 0] := CHR( CHRCNT)
  7436  17    2:0    81       END;

  8082  17   28:D     1       PROCEDURE CHGPASS;  (* P010B1C *)
  8083  17   28:D     1       
  8084  17   28:D     1         VAR
  8085  17   28:D     1              NEWPASS2 : STRING[ 40];
  8086  17   28:D    22              NEWPASS1 : STRING[ 40];
  8087  17   28:D    43       
  8088  17   28:0     0         BEGIN;
  8089  17   28:1     0           WRITE( CHR(12));
  8090  17   28:1     8           WRITE( 'ENTER NEW PASSWORD ([RET] FOR NONE)');
  8091  17   28:1    53           REPEAT
  8092  17   28:2    53             GOTOXY( 10, 2);
  8093  17   28:2    58             GETPASS(  NEWPASS1)
  8094  17   28:1    60           UNTIL LENGTH( NEWPASS1) <= 15;
  8095  17   28:1    70           WRITE( CHR( 12));
  8096  17   28:1    78           WRITE( 'ENTER AGAIN TO BE SURE');
  8097  17   28:1   110           REPEAT
  8098  17   28:2   110             GOTOXY( 10, 2);
  8099  17   28:2   115             GETPASS( NEWPASS2)
  8100  17   28:1   117           UNTIL LENGTH( NEWPASS2) <= 15;
  8101  17   28:1   127           WRITE( CHR( 12));
  8102  17   28:1   135           IF NEWPASS1 = NEWPASS2 THEN
  8103  17   28:2   143             BEGIN
  8104  17   28:3   143               CHARREC.PASSWORD := NEWPASS1;
  8105  17   28:3   150               PUTCHARC( CHARREC, CHARACX);
  8106  17   28:3   158               GTSCNTOC;
  8107  17   28:3   160               WRITE( 'PASSWORD CHANGED - ')
  8108  17   28:2   189             END
  8109  17   28:1   189           ELSE
  8110  17   28:2   191             BEGIN
  8111  17   28:3   191               WRITELN( 'THEY ARE NOT THE SAME - YOUR PASSWORD');
  8112  17   28:3   244               WRITELN( 'HAS NOT BEEN CHANGED!');
  8113  17   28:3   281               WRITELN
  8114  17   28:2   281             END;
  8115  17   28:1   287           WRITE( 'PRESS [RET]');
  8116  17   28:1   308           GOTOXY( 41, 0);
  8117  17   28:1   313           READLN
  8118  17   28:0   313         END;

PROCEDURE TRAINING;  (* P010B16 *)
...
  8125  17   22:3     8             REPEAT
  8126  17   22:4     8               GOTOXY( 9, 10);
  8127  17   22:4    13               WRITE( 'PASSWORD >');
  8128  17   22:4    33               GETPASS( PASSSTR)
  8129  17   22:3    35             UNTIL LENGTH( PASSSTR) <= 15;
  8130  17   22:3    45             IF PASSSTR <> CHARREC.PASSWORD THEN
  8131  17   22:4    54               EXIT( TRAINING)
...
Code from:
  8157  17   22:2   348           WRITELN( 'C)HANGE  CLASS,' : 23);
Code to:
  8157  17   22:2   348           WRITELN( 'C)HANGE  CLASS, OR' : 26);
...
  8158  17   22:2   379           WRITELN( 'S)ET NEW PASSWORD, OR' : 29);
...
  8178  17   22:2   516             'S':  CHGPASS;

PROCEDURE MAKEMENU;  (* P010B0D *)
  7591  17   13:D     1         VAR
  7592  17   13:D     1              PASSWD : STRING;
...
Code from:
  7598  17   13:1    39           WRITELN( 'PASSWORD': 9);
Code to:
  7598  17   13:1    39           WRITELN( '': 9);
...
  7613  17   13:1   301           REPEAT
  7614  17   13:2   301             P010B0B;
  7615  17   13:2   303             WRITELN( 'ENTER A PASSWORD ([RET] FOR NONE)');
  7616  17   13:2   352             GOTOXY( 10, 1);
  7617  17   13:2   357             WRITE( CHR( 29));
  7618  17   13:2   365             GOTOXY( 10, 1);
  7619  17   13:2   370             GETPASS( CHARNAME);
  7620  17   13:2   375             IF LENGTH( CHARNAME) > 15 THEN
  7621  17   13:3   384               CHARNAME := COPY( CHARNAME, 1, 15);
  7622  17   13:2   401             P010B0B;
  7623  17   13:2   403             WRITELN( 'ENTER IT AGAIN TO BE SURE');
  7624  17   13:2   444             GOTOXY( 10, 1);
  7625  17   13:2   449             WRITE( CHR( 29));
  7626  17   13:2   457             GOTOXY( 10, 1);
  7627  17   13:2   462             GETPASS( PASSWD);
  7628  17   13:1   466           UNTIL PASSWD = CHARNAME;
  7629  17   13:1   475           CHARREC.PASSWORD := CHARNAME

Final Compiled File Name:	WIZARDRY.CODE

Destination Disks:		Any Wizardry Proving Grounds boot and scenario disks.


