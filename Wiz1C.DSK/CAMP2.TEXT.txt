(* VERSION DATE  : 03 AUG 2023 *)
(* FIX REFERENCE : WC026 WC038 *)
(* ENHANCEMENTS  : WC040 *)
      
      
    PROCEDURE IDENTIFY;  (* P010C15 *)
      
        VAR
             UNUSEDXX : INTEGER;
             
             
      PROCEDURE EXITIDNT( EXITSTR: STRING);  (* P010C16 *)
        
          BEGIN
            AASTRAA( EXITSTR);
            EXIT( IDENTIFY)
          END;
          
          
        BEGIN (* IDENTIFY *)
          DISPSTAT := FALSE;
          IF CHARACTR[ CAMPCHAR].CLASS <> BISHOP THEN
              EXITIDNT( 'NOT BISHOP');
          LLBASE04 := CAMPCHAR;
          BASE12.GOTOX := XTRAININ;
          XGOTO := XCAMPSTF;
          EXIT( CAMP)
        END;  (* IDENTIFY *)
        
        
      PROCEDURE DOTRADE;  (* P010C17 *)
      
        VAR
             GOLD2TRA : TWIZLONG;
             TRADETO  : INTEGER;
             GOLDSTR  : STRING;
             GOLDX    : INTEGER;
             TEMP0001 : INTEGER; (* MULTIPLE USES *)
             ITEMX    : INTEGER;
             
             
        PROCEDURE EXITTRAD( EXITSTR: STRING);  (* P010C18 *)
        
          BEGIN
            AASTRAA( EXITSTR);
            EXIT( DOTRADE)
          END;
          
          
        PROCEDURE TRADGOLD;  (* P010C19 *)
        
          VAR
               TEMPGOLD : TWIZLONG;
               MULT10   : INTEGER;
        
          BEGIN
            GOTOXY( 0, 18);
            WRITE( CHR( 11));
            WRITE( 'AMT OF GOLD ? >');
            GETLINE( GOLDSTR);
            FILLCHAR( TEMPGOLD, 6, 0);
            FILLCHAR( GOLD2TRA, 6, 0);
            TEMP0001 := 0;
            MULT10 := 10;
            FOR GOLDX := 1 TO LENGTH( GOLDSTR) DO
              IF (ORD( GOLDSTR[ GOLDX]) < ORD( '0')) OR
                 (ORD( GOLDSTR[ GOLDX]) > ORD( '9')) OR
                 (GOLDX > 12) OR
                 (TEMP0001 = -1)    THEN
                TEMP0001 := -1
              ELSE
                BEGIN
                  MULTLONG( GOLD2TRA, MULT10);
                  TEMPGOLD.LOW := ORD( GOLDSTR[ GOLDX]) - ORD( '0');
                  ADDLONGS( GOLD2TRA, TEMPGOLD)
                END;
            IF TEMP0001 = -1 THEN
              EXITTRAD( 'BAD AMOUNT'); (* WC026 FROM -BAD AMT- *)
            IF TESTLONG( CHARACTR[ CAMPCHAR].GOLD, GOLD2TRA) < 0 THEN
              EXITTRAD( 'NOT ENOUGH $');
            ADDLONGS( CHARACTR[ TRADETO].GOLD, GOLD2TRA);
            SUBLONGS( CHARACTR[ CAMPCHAR].GOLD, GOLD2TRA)
          END;  (* TRADGOLD *)
          
          
        PROCEDURE TRADITEM;  (* P010C1A *)
        
          BEGIN
            REPEAT
              REPEAT
                GOTOXY( 0, 18);
                WRITE( CHR( 11));
                WRITE( 'WHAT ITEM ([RET] EXITS) ? >');
                GETKEY;
                ITEMX := ORD( INCHAR) - ORD( '0');
                IF INCHAR = CHR( CRETURN) THEN
                  EXIT( DOTRADE)
              UNTIL (ITEMX > 0) AND
                    (ITEMX <= CHARACTR[ CAMPCHAR].POSS.POSSCNT);
              IF CHARACTR[ TRADETO].POSS.POSSCNT = 8 THEN
                EXITTRAD( 'FULL');
              IF CHARACTR[ CAMPCHAR].POSS.POSSESS[ ITEMX].CURSED THEN
                EXITTRAD( 'CURSED');
              IF CHARACTR[ CAMPCHAR].POSS.POSSESS[ ITEMX].EQUIPED THEN
                EXITTRAD( 'EQUIPPED');
              TEMP0001 := CHARACTR[ TRADETO].POSS.POSSCNT + 1;
              CHARACTR[ TRADETO].POSS.POSSESS[ TEMP0001] :=
                CHARACTR[ CAMPCHAR].POSS.POSSESS[ ITEMX];
              CHARACTR[ TRADETO].POSS.POSSCNT := TEMP0001;
              FOR TEMP0001 := ITEMX + 1 TO CHARACTR[ CAMPCHAR].POSS.POSSCNT DO
                CHARACTR[ CAMPCHAR].POSS.POSSESS[ TEMP0001 - 1] :=
                  CHARACTR[ CAMPCHAR].POSS.POSSESS[ TEMP0001];
              CHARACTR[ CAMPCHAR].POSS.POSSCNT :=
                                          CHARACTR[ CAMPCHAR].POSS.POSSCNT - 1;
              DSPITEMS
            UNTIL FALSE
          END;  (* TRADITEM *)
      
      
        BEGIN (* DOTRADE *)
          DISPSTAT := FALSE;
          REPEAT
            TRADETO := GETCHARX( TRUE, 'TRADE WITH');
            IF TRADETO = -1 THEN
              EXIT( DOTRADE);
          UNTIL TRADETO <> CAMPCHAR;
          TRADGOLD;
          DSPSPELS; (* WC038 - TO UPDATE GOLD AMOUNT *)
          TRADITEM
        END;  (* DOTRADE *)
        
        
      PROCEDURE CAMPDO;  (* P010C1B *)
      
        VAR
             MENUTYPE : INTEGER;
      
      
        PROCEDURE CAMPMENU;  (* P010C1C *)
        
        
          PROCEDURE DSPSTATS;  (* P010C1D *)


            PROCEDURE CHEVRONS;  (* P010C1E *)
      
              VAR
                   INDX     : INTEGER;
                   LOSTXYL4 : PACKED ARRAY[ 0..15] OF BOOLEAN;
            
              BEGIN
                MOVELEFT( CHARACTR[ CAMPCHAR].LOSTXYL.AWARDS[ 4], LOSTXYL4, 2);
                WRITE( '"');   (* 1 DOUBLE QUOTE *)
                FOR INDX := 0 TO 15 DO
                  IF LOSTXYL4[ INDX] THEN
                    WRITE( COPY( '>!$#&*<?BCPKODG@', INDX + 1, 1) );
                WRITE(  '" ')
              END;  (* CHEVRONS *)
        
        
        
            BEGIN  (* DSPSTATS *)
              WITH CHARACTR[ CAMPCHAR] DO
                BEGIN
                  WRITE( CHR( 12));
                  WRITE( NAME);
                  WRITE( ' ');
                  IF LOSTXYL.AWARDS[ 4] > 0 THEN
                    CHEVRONS;
                  WRITE( SCNTOC.RACE[ RACE]);
                  WRITE( ' ');
                  WRITE( COPY( SCNTOC.ALIGN[ ALIGN], 1, 1) );
                  WRITE( '-');
                  WRITE( SCNTOC.CLASS[ CLASS]);
                  WRITELN;
                  WRITELN;
                  WRITE( 'STRENGTH' :12);
                  WRITE( ATTRIB[ STRENGTH] :3);
                  WRITE( 'GOLD ' :9);
                  PRNTLONG( GOLD);
                  WRITELN;
                  WRITE( 'I.Q.' :12);
                  WRITE( ATTRIB[ IQ] :3);
                  WRITE( 'EXP ' :9);
                  PRNTLONG( EXP);
                  WRITELN;
                  WRITE( 'PIETY' :12);
                  WRITE( ATTRIB[ PIETY] :3);
                  WRITELN;
                  WRITE( 'VITALITY' :12);
                  WRITE( ATTRIB[ VITALITY] :3);
                  WRITE( 'LEVEL ' :9);
                  WRITE( CHARLEV :3);
                  WRITE( 'AGE ' :9);
                  WRITE( (AGE DIV 52) :3);
                  WRITELN;
                  WRITE( 'AGILITY' :12);
                  WRITE( ATTRIB[ AGILITY] :3);
                  WRITE( 'HITS ' :9);
                  WRITE( HPLEFT :3);
                  WRITE( '/');
                  WRITE( HPMAX :3);
                  WRITE( 'AC' :4);
                  WRITE( (ARMORCL - ACMOD2) :4);
                  WRITELN;
                  WRITE( 'LUCK' : 12);
                  WRITE( ATTRIB[ LUCK] :3);
                  WRITE( 'STATUS ' :9);
                  WRITE( SCNTOC.STATUS[ STATUS]);
                  IF LOSTXYL.POISNAMT[ 1] > 0 THEN
                    WRITE( ' & POISONED');
                  WRITELN;
                  DSPSPELS;
                  DSPITEMS
                END
            END;
        
        PROCEDURE MENULST4; (* WC040 *)
          BEGIN
            WRITE( CHR( 11));
            WRITELN( 'YOU MAY E)QUIP, D)ROP AN ITEM, T)RADE,');
            WRITE( ' ' :8);
            WRITELN( 'POOL G)OLD, DIV)IDE GOLD,');
            WRITE( ' ' :8);
          END;
        
        PROCEDURE MENULST5; (* WC040 *)
          BEGIN
            WRITELN( 'R)EAD SPELL BOOKS, OR L)EAVE.')
          END;
        
          BEGIN  (* CAMPMENU *)
            WITH CHARACTR[ CAMPCHAR] DO
              BEGIN
                IF DISPSTAT THEN
                  DSPSTATS;
                GOTOXY( 0, 18);
                IF XGOTO = XINSPCT3 THEN
                  MENUTYPE := 0
                ELSE IF XGOTO = XINSPECT THEN
                  MENUTYPE := 1
                ELSE IF STATUS = OK THEN
                  MENUTYPE := 2
                ELSE
                  MENUTYPE := 1;
                  
                IF MENUTYPE = 2 THEN
                  BEGIN
                    MENULST4; (* WC040 *)
                    WRITELN( 'U)SE AN ITEM, I)DENTIFY AN ITEM,');
                    WRITE( ' ' :8);
                    WRITELN( 'CAST S)PELLS,');
                    WRITE( ' ' :8);
                    MENULST5 (* WC040 *)
                  END
                ELSE IF MENUTYPE = 1 THEN
                  BEGIN
                    MENULST4; (* WC040 *)
                    MENULST5 (* WC040 *)
                  END
                ELSE
                  BEGIN
                    WRITE( CHR( 11));
                    WRITE( 'YOU MAY ');
                    MENULST5 (* WC040 *)
                  END;
              END
          END;  (* CAMPMENU *)
          
      PROCEDURE DIVALLG( CHAR4GLD: INTEGER); (* WC040 *)
      
        VAR
          ALOOP4   : INTEGER;
          GOLD2DIV : TWIZLONG;
          GOLDLESS : TWIZLONG;
      
        BEGIN
          POOLALLG( CHAR4GLD);
          GOLD2DIV := CHARACTR[ CHAR4GLD].GOLD;
          DIVLONG( GOLD2DIV, PARTYCNT);
          GOLDLESS := GOLD2DIV;
          MULTLONG( GOLDLESS, PARTYCNT);
          SUBLONGS( CHARACTR[ CHAR4GLD].GOLD, GOLDLESS);
          FOR ALOOP4 := 0 TO PARTYCNT - 1 DO
            ADDLONGS( CHARACTR[ ALOOP4].GOLD, GOLD2DIV)
        END;
          
        BEGIN (* CAMPDO *)
          CAMPMENU;
          DISPSTAT := TRUE;
          REPEAT
            GOTOXY( 41, 0);
            GETKEY
          UNTIL (INCHAR = 'R') OR (INCHAR = 'L') OR
                ((MENUTYPE > 0) AND
                 ((INCHAR = 'T') OR (INCHAR = 'D') OR (INCHAR = 'E')
                  OR (INCHAR = 'G') OR (INCHAR = 'V'))) OR
                ((MENUTYPE > 1) AND
                 ((INCHAR = 'I') OR (INCHAR = 'S') OR (INCHAR = 'U')));
          
          CASE INCHAR OF
            'L':  EXIT( CAMPDO);
            'E':  IF MENUTYPE > 0 THEN
                    BEGIN
                      XGOTO := XEQPDSP;
                      LLBASE04 := CAMPCHAR;
                      EXIT( CAMP)
                    END;
            'R':  BEGIN
                    XGOTO := XCAMPSTF;
                    BASE12.GOTOX := XDONE;
                    LLBASE04 := CAMPCHAR;
                    EXIT( CAMP)
                  END;
            'D':  IF MENUTYPE > 0 THEN
                    DROPITEM;
            'G':  IF MENUTYPE > 0 THEN
                    POOLALLG( CAMPCHAR); (* WC040 POOL GOLD *)
            'V':  IF MENUTYPE > 0 THEN
                    DIVALLG( CAMPCHAR); (* WC040 DIVIDE GOLD *)
            'I':  IF MENUTYPE = 2 THEN
                    IDENTIFY;
            'S':  IF MENUTYPE = 2 THEN
                    CASTSPEL( -1);
            'U':  IF MENUTYPE = 2 THEN
                    USEITEM;
            'T':  DOTRADE
           END
        END;  (* CAMPDO *)
        
        
      BEGIN  (* INSPECT *)
        CAMPCHAR := LLBASE04;
        XGOTO2 := XGOTO;
        WRITE( CHR( 12));
        REPEAT
          CAMPDO;
        UNTIL INCHAR = 'L';
        WRITE( CHR( 12))
      END;   (* INSPECT *)
      
      
  PROCEDURE CAMPMEN2;  (* P010C1F *)
  
    VAR
         CHARX : INTEGER;
      
      
    PROCEDURE DSP1LINE( CHARX: INTEGER);  (* P010C20 *)
    
      BEGIN
        GOTOXY(  0, 3 + CHARX);
        WRITE( CHR( 29));
        WRITE( (CHARX + 1) : 2);
        WRITE( ' ');
        WRITE( CHARACTR[ CHARX].NAME);
        GOTOXY( 19, 3 + CHARX);
        WRITE( COPY( SCNTOC.ALIGN[ CHARACTR[ CHARX].ALIGN], 1, 1));
        WRITE( '-');
        WRITE( COPY( SCNTOC.CLASS[ CHARACTR[ CHARX].CLASS], 1, 3));
        WRITE( ' ');
        IF CHARACTR[ CHARX].ARMORCL - ACMOD2 > -10 THEN
          WRITE( (CHARACTR[ CHARX].ARMORCL - ACMOD2) : 2)
        ELSE
          WRITE( 'LO');
        WRITE( CHARACTR[ CHARX].HPLEFT : 5);
        LLBASE04 := CHARACTR[ CHARX].HEALPTS -
                    CHARACTR[ CHARX].LOSTXYL.POISNAMT[ 1];
        IF LLBASE04 > 0 THEN
          WRITE( '+')
        ELSE IF LLBASE04 < 0 THEN
          WRITE( '-')
        ELSE
          WRITE( ' ');
                    
        IF CHARACTR[ CHARX].STATUS = OK THEN
          IF CHARACTR[ CHARX].LOSTXYL.POISNAMT[ 1] <> 0 THEN
            WRITELN( 'POISON')
          ELSE
            WRITELN( CHARACTR[ CHARX].HPMAX :4)
        ELSE
          WRITELN( SCNTOC.STATUS[ CHARACTR[ CHARX].STATUS]);
      END;
      
      
    BEGIN (* CAMPMEN2 *)
      WRITE( CHR( 12));
      WRITELN( 'CAMP' :22);
      WRITELN;
      WRITELN( ' # CHARACTER NAME  CLASS AC HITS STATUS');
      FOR CHARX := 0 TO PARTYCNT - 1 DO
        BEGIN
          DSP1LINE( CHARX)
        END;
      GOTOXY( 0, 12);
      WRITELN( 'YOU MAY R)EORDER, E)QUIP, D)ISBAND,');
      WRITE( ' ' :8);
      WRITELN( '#) TO INSPECT, OR');
      WRITE( ' ' :8);
      WRITELN( 'L)EAVE THE CAMP.')
    END;  (* CAMPMEN2 *)
      
      
  PROCEDURE DISBAND;  (* P010C21 *)
  
  
    PROCEDURE CONFIRM( NULLRE :STRING);  (* P010C22 *)
    
      BEGIN (* CONFIRM *)
        WRITE( CHR( 12));
        WRITE( NULLRE);
        WRITE( 'CONFIRM (Y/N) ?');
        REPEAT
          GOTOXY( 41, 0);
          READ( INCHAR)
        UNTIL (INCHAR = 'Y') OR (INCHAR = 'N');
        IF INCHAR = 'N' THEN
          EXIT( DISBAND)
      END;  (* CONFIRM *)
      
      
    BEGIN (* DISBAND *)
      CONFIRM( '');
      CONFIRM( 'RE-');
      FOR LLBASE04 := 0 TO PARTYCNT - 1 DO
        BEGIN
          WITH CHARACTR[ LLBASE04] DO
            BEGIN
              INMAZE := FALSE;
              LOSTXYL.LOCATION[ 1] := MAZEX;
              LOSTXYL.LOCATION[ 2] := MAZEY;
              LOSTXYL.LOCATION[ 3] := MAZELEV;
              AGE := AGE + 25;
              MOVELEFT( CHARACTR[ LLBASE04],
                        IOCACHE[ GETRECW(
                                         ZCHAR,
                                         CHARDISK[ LLBASE04],
                                         SIZEOF( TCHAR))],
                        SIZEOF( TCHAR) )
            END
        END;
        
        MOVELEFT( IOCACHE[ GETREC( ZZERO, 0, SIZEOF( TSCNTOC))], 
                  SCNTOC,
                  SIZEOF( TSCNTOC) );
        LLBASE04 := -2;
        XGOTO := XSCNMSG;
        EXIT( CAMP)
    END;  (* DISBAND *)
        
        
    BEGIN  (* CAMP *)
      DISPSTAT := TRUE;
      FOR OBJI := 1 TO 8 DO
        OBJIDS[ OBJI - 1] := -1;
      TEXTMODE;
      IF (XGOTO = XBCK2CMP) OR
         (XGOTO = XBK2CMP2) THEN
        BEGIN
          XGOTO := XGOTO2;
          IF XGOTO = XINSPCT2 THEN
            INSPECT
        END;
      IF XGOTO = XINSPECT THEN
        BEGIN
          INSPECT;
          XGOTO := XGILGAMS;
          EXIT( CAMP)
        END;
      IF XGOTO = XINSPCT3 THEN
        BEGIN
          LLBASE04 := 0;
          INSPECT;
          XGOTO := XBCK2ROL;
          EXIT( CAMP)
        END;
      
      REPEAT
        UNITCLEAR( 1);
        CAMPMEN2;
        GOTOXY( 41, 0);
        GETKEY;
        IF (INCHAR > '0') AND (INCHAR <= CHR( ORD( '0') + PARTYCNT)) THEN
          BEGIN
            LLBASE04 := ORD( INCHAR) - ORD( '1');
            FOR OBJI := 1 TO 8 DO
              OBJIDS[ OBJI - 1] := -1;
            INSPECT
          END
        ELSE
          BEGIN
            CASE INCHAR OF
             'R':  BEGIN
                     XGOTO := XREORDER;
                     EXIT( CAMP)
                   END;
             'L':  BEGIN
                     XGOTO := XCMP2EQ6;
                     EXIT( CAMP)
                   END;
             'E':  BEGIN
                     XGOTO := XEQPDSP;
                     LLBASE04 := -1;
                     EXIT( CAMP)
                   END;
             'D':  DISBAND;
            END;
          END;
          
      UNTIL FALSE
    END;  (* CAMP *)
  
