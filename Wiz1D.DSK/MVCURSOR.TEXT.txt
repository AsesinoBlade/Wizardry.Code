 .PROC MVCURSOR,2 ; 2 PARAMETERS ;    P01001F,2
;
;          ; CALL:  MVCURSOR (X, Y);
;          ;
;          ; IN THIS ROUTINE:
;          ;
;          ;        X STORED AT $4F9  (SLOT #1 RAM SPACE)
;          ;        Y STORED AT $579  (SLOT #1 RAM SPACE)
;          ;
;          ;            PRGRCHR USES $4F9 AND $579
;          ;
;          ; MVCURSOR( 40, Y)    TURN ON GRAPHICS MODE
;          ; MVCUROSR( 50, Y)    TURN ON TEXT MODE
;          ; MVCURSOR( 60, Y)    JUMP TO $2002  (COPY PROTECTION)
;          ; MVCURSOR( 70, Y)    CRASH AND BURN (COPY PROTECTION)
;          ; MVCURSOR( 80, Y)    ADJUST RANDOM # (UNTIL KEY IS AVAILABLE)
;          ;                                  $47A, $47B, $47C, $47D (???)
;          ;                       RNG USES:  $47A, $4FA, $57A, $5FB (!!!)
;    
 PLA       ; PULL RETURN
 STA 00
 PLA
 STA 01
;
 PLA       ; PARAM 2    08 := Y COORDINATE
 STA 08
 PLA
 PLA       ; PARAM 1    06 := X COORDINATE
 STA 06
 PLA
;
 LDA 01    ; PUSH RETURN
 PHA
 LDA 00
 PHA
;
 LDA 06
 CMP #028  ; X = 40?
 BEQ L58EF ;   YES, L58EF
;
 CMP #032  ; X = 50?
 BEQ L58FC ;   YES, L58FC
;
 CMP #03C  ; X = 60?
 BEQ L5909 ;   YES, L5909
;
 CMP #046  ; X = 70?
 BEQ L590C ;   YES, L590C
;
 CMP #050  ; X = 80?
 BEQ L5920 ;   YES, L5920
;
;          ; X NOT A "SPECIAL" VALUE
;
 STA 004F9 ; SAVE "X" COORDINATE (AT SLOT #1 RAM SPACE)
 LDA 08
 STA 00579 ; SAVE "Y" COORDINATE (AT SLOT #1 RAM SPACE)
 RTS
;
L58EF
;
;          ; TURN ON GRAPHICS MODE
; 
 STA 0C050 ;   GRAPHICS
 STA 0C054 ;   PRIMARY PAGE
 STA 0C057 ;   HI RES
 STA 0C052 ;   ALL GRAPHICS
 RTS
;
L58FC
;
;          ; TURN ON TEXT MODE
;
 STA 0C051 ;   TEXT
 STA 0C054 ;   PRIMARY PAGE
 STA 0C056 ;   LO RES
 STA 0C052 ;   ALL TEXT
 RTS
;
L5909
;
;          ; EXECUTE COPY PROTECTION CODE
;          ; CODE AT $2002 WAS LOADED FROM SCENARIO.DATA ON SIDE 2 OF DISK
;          ;
 JMP 02002 ;
;
L590C
;
;          ; CRASH AND BURN  (PART OF COPY PROTECTION CODE)
;
 LDA #0BF  ; START AT $BF00..$BFFF
 STA 03
 LDA #00
 STA 02
;
L5914
 LDY #00
L5916
 STA @2,Y  ; STORE 0
 DEY
 BNE L5916 ; DO 256 BYTES
;
 DEC 03    ; CONTINUE DOWNWARD THROUGH MEMORY
 JMP L5914 ; EVENTUALLY THE SYSTEM WILL EXECUTE A 0 INSTRUCTION
           ; WHICH IS A BRK INSTRUCTION.  SINCE THE BRK VECTORS
           ; HAVE ALREADY BEEN CHANGED, THE MONITOR WILL REBOOT.
           ;
L5920
;
;          ; ADJUST RANDOM # UNTIL KEY IS AVAILABLE FROM INPUT BUFFER
;          ;   OR A KEY IS PRESSED.
;
 LDA 0C083 ; SELECT RAM CARD RAM READ, BANK 2
 JSR 0BF0A ; $BF0A IS CONCK IN SYSCOM (PASCAL OS)
 LDA 0C083
 LDA 0BF18 ; $BF18 IS RPTR IN SYSCOM (PASCAL OS)
 CMP 0BF19 ; $BF19 IS WPTR IN SYSCOM (PASCAL OS)
 BNE L5942 ; CIRCULAR INPUT BUFFER.  WHEN EQUAL, THEN NO CHARACTERS AVAILABLE.
;
;            ;   NO CHARACTER WAS IN THE INPUT BUFFER
L5931
 LDX #00
L5933
 INC 0047A,X ; INCREMENT RANDOM #         (BUG !!!!!!)
 BNE L593D   ;   $47A, $47B, $47C, $47D   (??????????)
 INX         ;   RAM FOR SLOTS #2, #3, #4, #5
 CPX #04     ;
 BNE L5933   ; RNG CODE USES $47A, $4FA, $57A, $5FB (ALL SLOT #2)
L593D
 LDA 0C000   ; KEYBOARD DATA
 BPL L5931   ; KEY PRESSED?  NO, L5931  (CONTINUE INCREMENTING RANDOM #)
;
L5942
;            ;   YES, A KEY WAS PRESSED (OR IS AVAILABLE FROM INPUT BUFFER)
 LDA 0C08B   ; RAM CARD RAM READ, BANK 1
 RTS
 .END
